{"version":3,"sources":["webpack:///./src/pages/page-2.js","webpack:///./node_modules/@apollo/react-hooks/lib/react-hooks.esm.js"],"names":["RAND_POST","gql","SecondPage","useQuery","loading","data","error","title","dangerouslySetInnerHTML","__html","page","content","to","OperationData","options","context","this","isMounted","previousOptions","prototype","getOptions","setOptions","newOptions","unmount","refreshClient","client","isNew","cleanup","verifyDocumentType","document","type","operation","QueryData","_super","_a","forceUpdate","_this","call","previousData","currentObservable","runLazy","runLazyQuery","lazyOptions","getExecuteResult","result","getQueryResult","startQuerySubscription","obsRefetch","variables","query","refetch","obsFetchMore","fetchMoreOptions","fetchMore","obsUpdateQuery","mapFn","updateQuery","obsStartPolling","pollInterval","startPolling","obsStopPolling","stopPolling","obsSubscribeToMore","subscribeToMore","execute","skip","ssr","removeQuerySubscription","updateObservableQuery","ssrDisabled","getExecuteSsrResult","executeLazy","networkStatus","ready","called","undefined","fetchData","obs","getCurrentResult","afterExecute","_b","lazy","handleErrorOrCompleted","setTimeout","resetQueryStoreErrors","bind","updatedOptions","renderPromises","ssrLoading","addQueryPromise","prepareObservableQueryOptions","Query","displayName","fetchPolicy","metadata","reactComponent","initializeObservableQuery","getSSRObservable","observableQueryOptions","children","watchQuery","registerSSRObservable","newObservableQueryOptions","subscription","obsQuery","subscribe","next","previousResult","_error","resubscribeToQuery","hasOwnProperty","lastError","getLastError","lastResult","getLastResult","resetLastResults","Object","assign","observableQueryFields","currentResult","partial","errors","length","graphQLErrors","partialRefetch","onCompleted","onError","unsubscribe","useBaseQuery","x","tick","queryDataRef","current","queryData","memoFn","key","ref","memo","value","queryResult","MutationData","setResult","runMutation","mutationFunctionOptions","onMutationStart","mutationId","generateNewMutationId","mutate","then","response","onMutationCompleted","onMutationError","mutation","Mutation","mostRecentMutationId","optimisticResponse","update","mutationContext","_c","awaitRefetchQueries","mutateOptions","mutateVariables","refetchQueries","ignoreResults","updateResult","isMostRecentMutation","SubscriptionData","initialize","getLoadingResult","shouldResubscribe","keys","startSubscription","endSubscription","updateCurrentData","updateError","complete","completeSubscription","onSubscriptionData","subscriptionData","onSubscriptionComplete","RenderPromises","queryPromises","Map","queryInfoTrie","observable","props","lookupQueryInfo","queryInstance","finish","seen","set","Promise","resolve","hasPromises","size","consumeAndAwaitPromises","promises","forEach","promise","push","clear","all","varMap","get","has","variablesString","JSON","stringify","info"],"mappings":"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","file":"component---src-pages-page-2-js-e4e6bd54c9e5ebeea0ce.js","sourcesContent":["import React from \"react\"\nimport { Link } from \"gatsby\"\nimport gql from \"graphql-tag\"\nimport { useQuery } from \"@apollo/react-hooks\"\n\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\n\nconst RAND_POST = gql`\n  {\n    page(id: \"cGFnZTo3MDE=\") {\n      content\n    }\n  }\n`\n\nconst SecondPage = () => {\n  const { loading, error, data } = useQuery(RAND_POST)\n\n  return (\n    <Layout>\n      <SEO title=\"Page two\" />\n      <h1>Hi from the second page</h1>\n      <p>Welcome to page 2</p>\n      {loading ? (\n        \"loading\"\n      ) : (\n        <div dangerouslySetInnerHTML={{ __html: data.page.content }} />\n      )}\n      <Link to=\"/\">Go back to the homepage</Link>\n    </Layout>\n  )\n}\n\nexport default SecondPage\n","import \"core-js/modules/es6.array.for-each\";\nimport \"core-js/modules/es6.promise\";\nimport \"core-js/modules/es6.string.iterator\";\nimport \"core-js/modules/es6.map\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.array.iterator\";\nimport \"core-js/modules/es6.object.to-string\";\nimport \"core-js/modules/es6.object.keys\";\nimport \"core-js/modules/es6.object.assign\";\nimport \"core-js/modules/es6.function.bind\";\nimport { parser, operationName, DocumentType, getApolloContext } from '@apollo/react-common';\nexport { ApolloConsumer, ApolloProvider, getApolloContext, resetApolloContext } from '@apollo/react-common';\nimport { __extends, __assign } from 'tslib';\nimport React, { useRef, useContext, useReducer, useEffect, useState } from 'react';\nimport { NetworkStatus, ApolloError } from 'apollo-client';\nimport { equal } from '@wry/equality';\nimport { invariant } from 'ts-invariant';\n\nvar OperationData = function () {\n  function OperationData(options, context) {\n    this.isMounted = false;\n    this.previousOptions = {};\n    this.context = {};\n    this.options = {};\n    this.options = options || {};\n    this.context = context || {};\n  }\n\n  OperationData.prototype.getOptions = function () {\n    return this.options;\n  };\n\n  OperationData.prototype.setOptions = function (newOptions) {\n    if (!equal(this.options, newOptions)) {\n      this.previousOptions = this.options;\n    }\n\n    this.options = newOptions;\n  };\n\n  OperationData.prototype.unmount = function () {\n    this.isMounted = false;\n  };\n\n  OperationData.prototype.refreshClient = function () {\n    var client = this.options && this.options.client || this.context && this.context.client;\n    process.env.NODE_ENV === \"production\" ? invariant(!!client, 2) : invariant(!!client, 'Could not find \"client\" in the context or passed in as an option. ' + 'Wrap the root component in an <ApolloProvider>, or pass an ' + 'ApolloClient instance in via options.');\n    var isNew = false;\n\n    if (client !== this.client) {\n      isNew = true;\n      this.client = client;\n      this.cleanup();\n    }\n\n    return {\n      client: this.client,\n      isNew: isNew\n    };\n  };\n\n  OperationData.prototype.verifyDocumentType = function (document, type) {\n    var operation = parser(document);\n    var requiredOperationName = operationName(type);\n    var usedOperationName = operationName(operation.type);\n    process.env.NODE_ENV === \"production\" ? invariant(operation.type === type, 3) : invariant(operation.type === type, \"Running a \" + requiredOperationName + \" requires a graphql \" + (requiredOperationName + \", but a \" + usedOperationName + \" was used instead.\"));\n  };\n\n  return OperationData;\n}();\n\nvar QueryData = function (_super) {\n  __extends(QueryData, _super);\n\n  function QueryData(_a) {\n    var options = _a.options,\n        context = _a.context,\n        forceUpdate = _a.forceUpdate;\n\n    var _this = _super.call(this, options, context) || this;\n\n    _this.previousData = {};\n    _this.currentObservable = {};\n    _this.runLazy = false;\n\n    _this.runLazyQuery = function (options) {\n      _this.cleanup();\n\n      _this.runLazy = true;\n      _this.lazyOptions = options;\n\n      _this.forceUpdate();\n    };\n\n    _this.getExecuteResult = function () {\n      var result = _this.getQueryResult();\n\n      _this.startQuerySubscription();\n\n      return result;\n    };\n\n    _this.obsRefetch = function (variables) {\n      return _this.currentObservable.query.refetch(variables);\n    };\n\n    _this.obsFetchMore = function (fetchMoreOptions) {\n      return _this.currentObservable.query.fetchMore(fetchMoreOptions);\n    };\n\n    _this.obsUpdateQuery = function (mapFn) {\n      return _this.currentObservable.query.updateQuery(mapFn);\n    };\n\n    _this.obsStartPolling = function (pollInterval) {\n      _this.currentObservable && _this.currentObservable.query && _this.currentObservable.query.startPolling(pollInterval);\n    };\n\n    _this.obsStopPolling = function () {\n      _this.currentObservable && _this.currentObservable.query && _this.currentObservable.query.stopPolling();\n    };\n\n    _this.obsSubscribeToMore = function (options) {\n      return _this.currentObservable.query.subscribeToMore(options);\n    };\n\n    _this.forceUpdate = forceUpdate;\n    return _this;\n  }\n\n  QueryData.prototype.execute = function () {\n    this.refreshClient();\n\n    var _a = this.getOptions(),\n        skip = _a.skip,\n        query = _a.query,\n        ssr = _a.ssr;\n\n    if (skip || query !== this.previousData.query) {\n      this.removeQuerySubscription();\n      this.previousData.query = query;\n    }\n\n    this.updateObservableQuery();\n    if (this.isMounted) this.startQuerySubscription();\n    var ssrDisabled = ssr === false;\n    return this.getExecuteSsrResult(ssrDisabled) || this.getExecuteResult();\n  };\n\n  QueryData.prototype.executeLazy = function () {\n    return !this.runLazy ? [this.runLazyQuery, {\n      loading: false,\n      networkStatus: NetworkStatus.ready,\n      called: false,\n      data: undefined\n    }] : [this.runLazyQuery, this.execute()];\n  };\n\n  QueryData.prototype.fetchData = function () {\n    var options = this.getOptions();\n    if (options.skip || options.ssr === false) return false;\n    var obs = this.currentObservable.query;\n    var currentResult = obs.getCurrentResult();\n    return currentResult.loading ? obs.result() : false;\n  };\n\n  QueryData.prototype.afterExecute = function (_a) {\n    var _this = this;\n\n    var _b = (_a === void 0 ? {} : _a).lazy,\n        lazy = _b === void 0 ? false : _b;\n    this.isMounted = true;\n\n    if (!lazy || this.runLazy) {\n      this.handleErrorOrCompleted();\n      setTimeout(function () {\n        _this.currentObservable.query && _this.currentObservable.query.resetQueryStoreErrors();\n      });\n    }\n\n    return this.unmount.bind(this);\n  };\n\n  QueryData.prototype.cleanup = function () {\n    this.removeQuerySubscription();\n    delete this.currentObservable.query;\n    delete this.previousData.result;\n  };\n\n  QueryData.prototype.getOptions = function () {\n    var options = _super.prototype.getOptions.call(this);\n\n    var lazyOptions = this.lazyOptions || {};\n\n    var updatedOptions = __assign({}, options, {\n      variables: __assign({}, options.variables, lazyOptions.variables),\n      context: __assign({}, options.context, lazyOptions.context)\n    });\n\n    if (this.runLazy) {\n      delete updatedOptions.skip;\n    }\n\n    return updatedOptions;\n  };\n\n  QueryData.prototype.getExecuteSsrResult = function (ssrDisabled) {\n    var result;\n\n    if (this.context && this.context.renderPromises) {\n      var ssrLoading = {\n        loading: true,\n        networkStatus: NetworkStatus.loading,\n        called: true,\n        data: undefined\n      };\n\n      if (ssrDisabled) {\n        return ssrLoading;\n      }\n\n      result = this.context.renderPromises.addQueryPromise(this, this.getExecuteResult);\n\n      if (!result) {\n        result = ssrLoading;\n      }\n    }\n\n    return result;\n  };\n\n  QueryData.prototype.prepareObservableQueryOptions = function () {\n    var options = this.getOptions();\n    this.verifyDocumentType(options.query, DocumentType.Query);\n    var displayName = options.displayName || 'Query';\n\n    if (this.context && this.context.renderPromises && (options.fetchPolicy === 'network-only' || options.fetchPolicy === 'cache-and-network')) {\n      options.fetchPolicy = 'cache-first';\n    }\n\n    return __assign({}, options, {\n      displayName: displayName,\n      context: options.context || {},\n      metadata: {\n        reactComponent: {\n          displayName: displayName\n        }\n      }\n    });\n  };\n\n  QueryData.prototype.initializeObservableQuery = function () {\n    if (this.context && this.context.renderPromises) {\n      this.currentObservable.query = this.context.renderPromises.getSSRObservable(this.getOptions());\n    }\n\n    if (!this.currentObservable.query) {\n      var observableQueryOptions = this.prepareObservableQueryOptions();\n      this.previousData.observableQueryOptions = __assign({}, observableQueryOptions, {\n        children: null\n      });\n      this.currentObservable.query = this.refreshClient().client.watchQuery(observableQueryOptions);\n\n      if (this.context && this.context.renderPromises) {\n        this.context.renderPromises.registerSSRObservable(this.currentObservable.query, observableQueryOptions);\n      }\n    }\n  };\n\n  QueryData.prototype.updateObservableQuery = function () {\n    if (!this.currentObservable.query) {\n      this.initializeObservableQuery();\n      return;\n    }\n\n    var newObservableQueryOptions = __assign({}, this.prepareObservableQueryOptions(), {\n      children: null\n    });\n\n    if (!equal(newObservableQueryOptions, this.previousData.observableQueryOptions)) {\n      this.previousData.observableQueryOptions = newObservableQueryOptions;\n      this.currentObservable.query.setOptions(newObservableQueryOptions)[\"catch\"](function () {});\n    }\n  };\n\n  QueryData.prototype.startQuerySubscription = function () {\n    var _this = this;\n\n    if (this.currentObservable.subscription || this.getOptions().skip) return;\n    var obsQuery = this.currentObservable.query;\n    this.currentObservable.subscription = obsQuery.subscribe({\n      next: function next(_a) {\n        var loading = _a.loading,\n            networkStatus = _a.networkStatus,\n            data = _a.data;\n        var previousResult = _this.previousData.result;\n\n        if (previousResult) {\n          if (previousResult.loading && previousResult.networkStatus === NetworkStatus.fetchMore && equal(previousResult.data, data)) {\n            return;\n          }\n\n          if (previousResult.loading === loading && previousResult.networkStatus === networkStatus && equal(previousResult.data, data)) {\n            return;\n          }\n        }\n\n        _this.forceUpdate();\n      },\n      error: function error(_error) {\n        _this.resubscribeToQuery();\n\n        if (!_error.hasOwnProperty('graphQLErrors')) throw _error;\n        var previousResult = _this.previousData.result;\n\n        if (previousResult && previousResult.loading || !equal(_error, _this.previousData.error)) {\n          _this.previousData.error = _error;\n\n          _this.forceUpdate();\n        }\n      }\n    });\n  };\n\n  QueryData.prototype.resubscribeToQuery = function () {\n    this.removeQuerySubscription();\n    var lastError = this.currentObservable.query.getLastError();\n    var lastResult = this.currentObservable.query.getLastResult();\n    this.currentObservable.query.resetLastResults();\n    this.startQuerySubscription();\n    Object.assign(this.currentObservable.query, {\n      lastError: lastError,\n      lastResult: lastResult\n    });\n  };\n\n  QueryData.prototype.getQueryResult = function () {\n    var result = this.observableQueryFields();\n    var options = this.getOptions();\n\n    if (options.skip) {\n      result = __assign({}, result, {\n        data: undefined,\n        error: undefined,\n        loading: false,\n        called: true\n      });\n    } else {\n      var currentResult = this.currentObservable.query.getCurrentResult();\n      var loading = currentResult.loading,\n          partial = currentResult.partial,\n          networkStatus = currentResult.networkStatus,\n          errors = currentResult.errors;\n      var error = currentResult.error,\n          data = currentResult.data;\n\n      if (errors && errors.length > 0) {\n        error = new ApolloError({\n          graphQLErrors: errors\n        });\n      }\n\n      result = __assign({}, result, {\n        loading: loading,\n        networkStatus: networkStatus,\n        error: error,\n        called: true\n      });\n\n      if (loading) {\n        var previousData = this.previousData.result && this.previousData.result.data;\n        result.data = previousData && data ? __assign({}, previousData, data) : previousData || data;\n      } else if (error) {\n        Object.assign(result, {\n          data: (this.currentObservable.query.getLastResult() || {}).data\n        });\n      } else {\n        var fetchPolicy = this.currentObservable.query.options.fetchPolicy;\n        var partialRefetch = options.partialRefetch;\n\n        if (partialRefetch && !data && partial && fetchPolicy !== 'cache-only') {\n          Object.assign(result, {\n            loading: true,\n            networkStatus: NetworkStatus.loading\n          });\n          result.refetch();\n          return result;\n        }\n\n        result.data = data;\n      }\n    }\n\n    result.client = this.client;\n    this.previousData.loading = this.previousData.result && this.previousData.result.loading || false;\n    this.previousData.result = result;\n    return result;\n  };\n\n  QueryData.prototype.handleErrorOrCompleted = function () {\n    var obsQuery = this.currentObservable.query;\n    if (!obsQuery) return;\n\n    var _a = obsQuery.getCurrentResult(),\n        data = _a.data,\n        loading = _a.loading,\n        error = _a.error;\n\n    if (!loading) {\n      var _b = this.getOptions(),\n          query = _b.query,\n          variables = _b.variables,\n          onCompleted = _b.onCompleted,\n          onError = _b.onError;\n\n      if (this.previousOptions && !this.previousData.loading && equal(this.previousOptions.query, query) && equal(this.previousOptions.variables, variables)) {\n        return;\n      }\n\n      if (onCompleted && !error) {\n        onCompleted(data);\n      } else if (onError && error) {\n        onError(error);\n      }\n    }\n  };\n\n  QueryData.prototype.removeQuerySubscription = function () {\n    if (this.currentObservable.subscription) {\n      this.currentObservable.subscription.unsubscribe();\n      delete this.currentObservable.subscription;\n    }\n  };\n\n  QueryData.prototype.observableQueryFields = function () {\n    var observable = this.currentObservable.query;\n    return {\n      variables: observable.variables,\n      refetch: this.obsRefetch,\n      fetchMore: this.obsFetchMore,\n      updateQuery: this.obsUpdateQuery,\n      startPolling: this.obsStartPolling,\n      stopPolling: this.obsStopPolling,\n      subscribeToMore: this.obsSubscribeToMore\n    };\n  };\n\n  return QueryData;\n}(OperationData);\n\nfunction useDeepMemo(memoFn, key) {\n  var ref = useRef();\n\n  if (!ref.current || !equal(key, ref.current.key)) {\n    ref.current = {\n      key: key,\n      value: memoFn()\n    };\n  }\n\n  return ref.current.value;\n}\n\nfunction useBaseQuery(query, options, lazy) {\n  if (lazy === void 0) {\n    lazy = false;\n  }\n\n  var context = useContext(getApolloContext());\n\n  var _a = useReducer(function (x) {\n    return x + 1;\n  }, 0),\n      tick = _a[0],\n      forceUpdate = _a[1];\n\n  var updatedOptions = options ? __assign({}, options, {\n    query: query\n  }) : {\n    query: query\n  };\n  var queryDataRef = useRef();\n\n  if (!queryDataRef.current) {\n    queryDataRef.current = new QueryData({\n      options: updatedOptions,\n      context: context,\n      forceUpdate: forceUpdate\n    });\n  }\n\n  var queryData = queryDataRef.current;\n  queryData.setOptions(updatedOptions);\n  queryData.context = context;\n  var memo = {\n    options: __assign({}, updatedOptions, {\n      onError: undefined,\n      onCompleted: undefined\n    }),\n    context: context,\n    tick: tick\n  };\n  var result = useDeepMemo(function () {\n    return lazy ? queryData.executeLazy() : queryData.execute();\n  }, memo);\n  var queryResult = lazy ? result[1] : result;\n  useEffect(function () {\n    return queryData.afterExecute({\n      lazy: lazy\n    });\n  }, lazy ? undefined : [queryResult.loading, queryResult.networkStatus, queryResult.error, queryResult.data]);\n  useEffect(function () {\n    return function () {\n      return queryData.cleanup();\n    };\n  }, []);\n  return result;\n}\n\nfunction useQuery(query, options) {\n  return useBaseQuery(query, options, false);\n}\n\nfunction useLazyQuery(query, options) {\n  return useBaseQuery(query, options, true);\n}\n\nvar MutationData = function (_super) {\n  __extends(MutationData, _super);\n\n  function MutationData(_a) {\n    var options = _a.options,\n        context = _a.context,\n        result = _a.result,\n        setResult = _a.setResult;\n\n    var _this = _super.call(this, options, context) || this;\n\n    _this.runMutation = function (mutationFunctionOptions) {\n      if (mutationFunctionOptions === void 0) {\n        mutationFunctionOptions = {};\n      }\n\n      _this.onMutationStart();\n\n      var mutationId = _this.generateNewMutationId();\n\n      return _this.mutate(mutationFunctionOptions).then(function (response) {\n        _this.onMutationCompleted(response, mutationId);\n\n        return response;\n      })[\"catch\"](function (error) {\n        _this.onMutationError(error, mutationId);\n\n        if (!_this.getOptions().onError) throw error;\n      });\n    };\n\n    _this.verifyDocumentType(options.mutation, DocumentType.Mutation);\n\n    _this.result = result;\n    _this.setResult = setResult;\n    _this.mostRecentMutationId = 0;\n    return _this;\n  }\n\n  MutationData.prototype.execute = function (result) {\n    this.isMounted = true;\n    this.verifyDocumentType(this.getOptions().mutation, DocumentType.Mutation);\n    result.client = this.refreshClient().client;\n    return [this.runMutation, result];\n  };\n\n  MutationData.prototype.afterExecute = function () {\n    this.isMounted = true;\n    return this.unmount.bind(this);\n  };\n\n  MutationData.prototype.cleanup = function () {};\n\n  MutationData.prototype.mutate = function (mutationFunctionOptions) {\n    var _a = this.getOptions(),\n        mutation = _a.mutation,\n        variables = _a.variables,\n        optimisticResponse = _a.optimisticResponse,\n        update = _a.update,\n        _b = _a.context,\n        mutationContext = _b === void 0 ? {} : _b,\n        _c = _a.awaitRefetchQueries,\n        awaitRefetchQueries = _c === void 0 ? false : _c,\n        fetchPolicy = _a.fetchPolicy;\n\n    var mutateOptions = __assign({}, mutationFunctionOptions);\n\n    var mutateVariables = Object.assign({}, variables, mutateOptions.variables);\n    delete mutateOptions.variables;\n    return this.refreshClient().client.mutate(__assign({\n      mutation: mutation,\n      optimisticResponse: optimisticResponse,\n      refetchQueries: mutateOptions.refetchQueries || this.getOptions().refetchQueries,\n      awaitRefetchQueries: awaitRefetchQueries,\n      update: update,\n      context: mutationContext,\n      fetchPolicy: fetchPolicy,\n      variables: mutateVariables\n    }, mutateOptions));\n  };\n\n  MutationData.prototype.onMutationStart = function () {\n    if (!this.result.loading && !this.getOptions().ignoreResults) {\n      this.updateResult({\n        loading: true,\n        error: undefined,\n        data: undefined,\n        called: true\n      });\n    }\n  };\n\n  MutationData.prototype.onMutationCompleted = function (response, mutationId) {\n    var _a = this.getOptions(),\n        onCompleted = _a.onCompleted,\n        ignoreResults = _a.ignoreResults;\n\n    var data = response.data,\n        errors = response.errors;\n    var error = errors && errors.length > 0 ? new ApolloError({\n      graphQLErrors: errors\n    }) : undefined;\n\n    var callOncomplete = function callOncomplete() {\n      return onCompleted ? onCompleted(data) : null;\n    };\n\n    if (this.isMostRecentMutation(mutationId) && !ignoreResults) {\n      this.updateResult({\n        called: true,\n        loading: false,\n        data: data,\n        error: error\n      });\n    }\n\n    callOncomplete();\n  };\n\n  MutationData.prototype.onMutationError = function (error, mutationId) {\n    var onError = this.getOptions().onError;\n\n    if (this.isMostRecentMutation(mutationId)) {\n      this.updateResult({\n        loading: false,\n        error: error,\n        data: undefined,\n        called: true\n      });\n    }\n\n    if (onError) {\n      onError(error);\n    }\n  };\n\n  MutationData.prototype.generateNewMutationId = function () {\n    return ++this.mostRecentMutationId;\n  };\n\n  MutationData.prototype.isMostRecentMutation = function (mutationId) {\n    return this.mostRecentMutationId === mutationId;\n  };\n\n  MutationData.prototype.updateResult = function (result) {\n    if (this.isMounted && (!this.previousResult || !equal(this.previousResult, result))) {\n      this.setResult(result);\n      this.previousResult = result;\n    }\n  };\n\n  return MutationData;\n}(OperationData);\n\nfunction useMutation(mutation, options) {\n  var context = useContext(getApolloContext());\n\n  var _a = useState({\n    called: false,\n    loading: false\n  }),\n      result = _a[0],\n      setResult = _a[1];\n\n  var updatedOptions = options ? __assign({}, options, {\n    mutation: mutation\n  }) : {\n    mutation: mutation\n  };\n  var mutationDataRef = useRef();\n\n  function getMutationDataRef() {\n    if (!mutationDataRef.current) {\n      mutationDataRef.current = new MutationData({\n        options: updatedOptions,\n        context: context,\n        result: result,\n        setResult: setResult\n      });\n    }\n\n    return mutationDataRef.current;\n  }\n\n  var mutationData = getMutationDataRef();\n  mutationData.setOptions(updatedOptions);\n  mutationData.context = context;\n  useEffect(function () {\n    return mutationData.afterExecute();\n  });\n  return mutationData.execute(result);\n}\n\nvar SubscriptionData = function (_super) {\n  __extends(SubscriptionData, _super);\n\n  function SubscriptionData(_a) {\n    var options = _a.options,\n        context = _a.context,\n        setResult = _a.setResult;\n\n    var _this = _super.call(this, options, context) || this;\n\n    _this.currentObservable = {};\n    _this.setResult = setResult;\n\n    _this.initialize(options);\n\n    return _this;\n  }\n\n  SubscriptionData.prototype.execute = function (result) {\n    if (this.getOptions().skip === true) {\n      this.cleanup();\n      return {\n        loading: false,\n        error: undefined,\n        data: undefined,\n        variables: this.getOptions().variables\n      };\n    }\n\n    var currentResult = result;\n\n    if (this.refreshClient().isNew) {\n      currentResult = this.getLoadingResult();\n    }\n\n    var shouldResubscribe = this.getOptions().shouldResubscribe;\n\n    if (typeof shouldResubscribe === 'function') {\n      shouldResubscribe = !!shouldResubscribe(this.getOptions());\n    }\n\n    if (shouldResubscribe !== false && this.previousOptions && Object.keys(this.previousOptions).length > 0 && (this.previousOptions.subscription !== this.getOptions().subscription || !equal(this.previousOptions.variables, this.getOptions().variables) || this.previousOptions.skip !== this.getOptions().skip)) {\n      this.cleanup();\n      currentResult = this.getLoadingResult();\n    }\n\n    this.initialize(this.getOptions());\n    this.startSubscription();\n    this.previousOptions = this.getOptions();\n    return __assign({}, currentResult, {\n      variables: this.getOptions().variables\n    });\n  };\n\n  SubscriptionData.prototype.afterExecute = function () {\n    this.isMounted = true;\n  };\n\n  SubscriptionData.prototype.cleanup = function () {\n    this.endSubscription();\n    delete this.currentObservable.query;\n  };\n\n  SubscriptionData.prototype.initialize = function (options) {\n    if (this.currentObservable.query || this.getOptions().skip === true) return;\n    this.currentObservable.query = this.refreshClient().client.subscribe({\n      query: options.subscription,\n      variables: options.variables,\n      fetchPolicy: options.fetchPolicy\n    });\n  };\n\n  SubscriptionData.prototype.startSubscription = function () {\n    if (this.currentObservable.subscription) return;\n    this.currentObservable.subscription = this.currentObservable.query.subscribe({\n      next: this.updateCurrentData.bind(this),\n      error: this.updateError.bind(this),\n      complete: this.completeSubscription.bind(this)\n    });\n  };\n\n  SubscriptionData.prototype.getLoadingResult = function () {\n    return {\n      loading: true,\n      error: undefined,\n      data: undefined\n    };\n  };\n\n  SubscriptionData.prototype.updateResult = function (result) {\n    if (this.isMounted) {\n      this.setResult(result);\n    }\n  };\n\n  SubscriptionData.prototype.updateCurrentData = function (result) {\n    var onSubscriptionData = this.getOptions().onSubscriptionData;\n    this.updateResult({\n      data: result.data,\n      loading: false,\n      error: undefined\n    });\n\n    if (onSubscriptionData) {\n      onSubscriptionData({\n        client: this.refreshClient().client,\n        subscriptionData: result\n      });\n    }\n  };\n\n  SubscriptionData.prototype.updateError = function (error) {\n    this.updateResult({\n      error: error,\n      loading: false\n    });\n  };\n\n  SubscriptionData.prototype.completeSubscription = function () {\n    var onSubscriptionComplete = this.getOptions().onSubscriptionComplete;\n    if (onSubscriptionComplete) onSubscriptionComplete();\n    this.endSubscription();\n  };\n\n  SubscriptionData.prototype.endSubscription = function () {\n    if (this.currentObservable.subscription) {\n      this.currentObservable.subscription.unsubscribe();\n      delete this.currentObservable.subscription;\n    }\n  };\n\n  return SubscriptionData;\n}(OperationData);\n\nfunction useSubscription(subscription, options) {\n  var context = useContext(getApolloContext());\n  var updatedOptions = options ? __assign({}, options, {\n    subscription: subscription\n  }) : {\n    subscription: subscription\n  };\n\n  var _a = useState({\n    loading: !updatedOptions.skip,\n    error: undefined,\n    data: undefined\n  }),\n      result = _a[0],\n      setResult = _a[1];\n\n  var subscriptionDataRef = useRef();\n\n  function getSubscriptionDataRef() {\n    if (!subscriptionDataRef.current) {\n      subscriptionDataRef.current = new SubscriptionData({\n        options: updatedOptions,\n        context: context,\n        setResult: setResult\n      });\n    }\n\n    return subscriptionDataRef.current;\n  }\n\n  var subscriptionData = getSubscriptionDataRef();\n  subscriptionData.setOptions(updatedOptions);\n  subscriptionData.context = context;\n  useEffect(function () {\n    return subscriptionData.afterExecute();\n  });\n  useEffect(function () {\n    return subscriptionData.cleanup.bind(subscriptionData);\n  }, []);\n  return subscriptionData.execute(result);\n}\n\nfunction useApolloClient() {\n  var client = React.useContext(getApolloContext()).client;\n  process.env.NODE_ENV === \"production\" ? invariant(client, 1) : invariant(client, 'No Apollo Client instance can be found. Please ensure that you ' + 'have called `ApolloProvider` higher up in your tree.');\n  return client;\n}\n\nfunction makeDefaultQueryInfo() {\n  return {\n    seen: false,\n    observable: null\n  };\n}\n\nvar RenderPromises = function () {\n  function RenderPromises() {\n    this.queryPromises = new Map();\n    this.queryInfoTrie = new Map();\n  }\n\n  RenderPromises.prototype.registerSSRObservable = function (observable, props) {\n    this.lookupQueryInfo(props).observable = observable;\n  };\n\n  RenderPromises.prototype.getSSRObservable = function (props) {\n    return this.lookupQueryInfo(props).observable;\n  };\n\n  RenderPromises.prototype.addQueryPromise = function (queryInstance, finish) {\n    var info = this.lookupQueryInfo(queryInstance.getOptions());\n\n    if (!info.seen) {\n      this.queryPromises.set(queryInstance.getOptions(), new Promise(function (resolve) {\n        resolve(queryInstance.fetchData());\n      }));\n      return null;\n    }\n\n    return finish();\n  };\n\n  RenderPromises.prototype.hasPromises = function () {\n    return this.queryPromises.size > 0;\n  };\n\n  RenderPromises.prototype.consumeAndAwaitPromises = function () {\n    var _this = this;\n\n    var promises = [];\n    this.queryPromises.forEach(function (promise, queryInstance) {\n      _this.lookupQueryInfo(queryInstance).seen = true;\n      promises.push(promise);\n    });\n    this.queryPromises.clear();\n    return Promise.all(promises);\n  };\n\n  RenderPromises.prototype.lookupQueryInfo = function (props) {\n    var queryInfoTrie = this.queryInfoTrie;\n    var query = props.query,\n        variables = props.variables;\n    var varMap = queryInfoTrie.get(query) || new Map();\n    if (!queryInfoTrie.has(query)) queryInfoTrie.set(query, varMap);\n    var variablesString = JSON.stringify(variables);\n    var info = varMap.get(variablesString) || makeDefaultQueryInfo();\n    if (!varMap.has(variablesString)) varMap.set(variablesString, info);\n    return info;\n  };\n\n  return RenderPromises;\n}();\n\nexport { RenderPromises, useApolloClient, useLazyQuery, useMutation, useQuery, useSubscription };"],"sourceRoot":""}